{{> navigation}}
<!-- index.hbs -->
<div class="container">
  <h1 class="text-center">Bienvenido a VibeBones</h1>

  {{#if user}}
    <p class="text-center">Hola, {{user.dataValues.commerceName}}</p>
  {{/if}}

  <div id="products-container" class="mt-4">
    {{#if products.length}}
      <div class="row row-cols-1 row-cols-md-3 g-4">
        {{#each products}}
          <div class="col">
            <div class="card h-100">
              <div class="card-body">
                <h5 class="card-title">{{this.title}}</h5>
                <p class="card-text">{{this.description}}</p>
                <p class="card-text">Precio: {{this.price}}</p>
                <p class="card-text">Stock: {{this.stock}}</p>
                {{#if (eq user.dataValues.userType 'ADMIN')}}
                  <div class="btn-group mt-2" role="group">
                    <a href="/api/v1/view/products/update/{{this.id}}" class="btn btn-primary btn-sm update-product">Actualizar</a>
                    <button type="button" class="btn btn-danger btn-sm delete-product" data-product-id="{{this.id}}">Eliminar</button>
                  </div>
                {{else}}
                  <div class="mt-2">
                    <input type="number" class="form-control quantity-input" placeholder="Cantidad" min="1" max="{{this.stock}}" data-product-id="{{this.id}}">
                    <button type="button" class="btn btn-success btn-sm add-to-cart" data-product-id="{{this.id}}">Añadir al carrito</button>
                  </div>
                {{/if}}
              </div>
            </div>
          </div>
        {{/each}}
      </div>
    {{else}}
      <p class="text-center">No hay productos disponibles.</p>
    {{/if}}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const response = await fetch('/api/v1/view/products', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const data = await response.json();
      console.log("desde el index");
      console.log(data);
      console.log("termina el index");

      const productsContainer = document.getElementById('products-container');
      productsContainer.innerHTML = '';

      if (response.status === 200) {
        if (data.products.length > 0) {
          const userType = "{{user.dataValues.userType}}"; // Obtén el tipo de usuario desde el servidor
          const userId = "{{user.dataValues.id}}"; // Obtén el id del usuario desde el servidor

          const productsHtml = data.products.map(product => `
            <div class="col">
              <div class="card h-100">
                <div class="card-body">
                  <h5 class="card-title">${product.title}</h5>
                  <p class="card-text">${product.description}</p>
                  <p class="card-text">Precio: ${product.price}</p>
                  <p class="card-text">Stock: ${product.stock}</p>
                  {{#if (eq user.dataValues.userType 'ADMIN')}}
                    <div class="btn-group mt-2" role="group">
                      <a href="/api/v1/view/products/update/${product.id}" class="btn btn-primary btn-sm update-product">Actualizar</a>
                      <button type="button" class="btn btn-danger btn-sm delete-product" data-product-id="${product.id}">Eliminar</button>
                    </div>
                  {{else}}
                    <div class="mt-2">
                      <input type="number" class="form-control quantity-input" placeholder="Cantidad" min="1" max="${product.stock}" data-product-id="${product.id}">
                      <button type="button" class="btn btn-success btn-sm add-to-cart" data-product-id="${product.id}">Añadir al carrito</button>
                    </div>
                  {{/if}}
                </div>
              </div>
            </div>
          `).join('');

          productsContainer.innerHTML = `
            <div class="row row-cols-1 row-cols-md-3 g-4">
              ${productsHtml}
            </div>
          `;

          // Agregar event listener para el botón de actualizar
          document.querySelectorAll('.update-product').forEach(button => {
            button.addEventListener('click', async (event) => {
              event.preventDefault();
              const productId = button.getAttribute('href').split('/').pop();
              window.location.assign(`/api/v1/view/products/update/${productId}`);
            });
          });

          // Agregar event listener para el botón de eliminar
          document.querySelectorAll('.delete-product').forEach(button => {
            button.addEventListener('click', async () => {
              const productId = button.getAttribute('data-product-id');
              try {
                const response = await fetch(`/api/v1/view/products/${productId}`, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json',
                  }
                });

                const data = await response.json();

                if (response.status === 201) {
                  console.log('Producto eliminado:', data.message);
                  window.location.reload(); // Recargar la página para reflejar los cambios
                } else {
                  console.error('Error al eliminar producto:', data.message);
                }
              } catch (error) {
                console.error('Error al eliminar producto:', error.message);
              }
            });
          });

          // Obtener o crear el carrito y guardar el ID en las cookies
          let cartId = await getOrCreateCart(userId);
          document.cookie = `cart_id=${cartId}; path=/`;

          // Agregar event listener para el botón de añadir al carrito
          document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', async () => {
              const productId = button.getAttribute('data-product-id');
              const quantityInput = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
              const quantity = parseInt(quantityInput.value);

              if (quantity > 0) {
                try {
                  // Si se creó el carrito correctamente, añadir producto
                  if (cartId) {
                    const response = await fetch('/api/v1/carts/product', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        userId: userId,
                        cartId: cartId,
                        productId: productId,
                        quantity: quantity
                      })
                    });

                    const data = await response.json();

                    if (response.status === 201) {
                      console.log('Producto añadido al carrito:', data.message);
                    } else {
                      console.error('Error al añadir producto al carrito:', data.message);
                    }
                  } else {
                    console.error('Error al crear el carrito.');
                  }
                } catch (error) {
                  console.error('Error al añadir producto al carrito:', error.message);
                }
              } else {
                alert('Por favor, introduce una cantidad válida.');
              }
            });
          });
        } else {
          productsContainer.innerHTML = '<p class="text-center">No hay productos disponibles.</p>';
        }
      } else {
        console.error('Error al cargar productos:', data.message);
      }
    } catch (error) {
      console.error('Error al cargar productos:', error.message);
    }
  });

  async function getOrCreateCart(userId) {
    try {
      // Verificar si ya existe un cart_id en las cookies
      const cookies = document.cookie.split(';');
      let cartId = null;
      cookies.forEach(cookie => {
        const [name, value] = cookie.trim().split('=');
        if (name === 'cart_id') {
          cartId = value;
        }
      });

      // Si no existe, crear el carrito
      if (!cartId) {
        const response = await fetch('/api/v1/carts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            user_id: userId
          })
        });

        const data = await response.json();

        if (response.status === 201) {
          console.log('Carrito creado:', data.data.id);
          cartId = data.data.id;
        } else {
          console.error('Error al crear carrito:', data.message);
        }
      }

      return cartId;
    } catch (error) {
      console.error('Error al obtener o crear carrito:', error.message);
      return null;
    }
  }
</script>
